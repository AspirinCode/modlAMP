"""
.. module:: centrosymmetric

.. moduleauthor:: modlab Alex Mueller <alex.mueller@pharma.ethz.ch>

This module incorporates a class with methods to generate special peptide sequences with an overall presumed
hydrophobic moment. Sequences are generated by centro-symmetric blocks of seven amino acids. Two or three blocks
are added to build a final sequence of length 14 or 21 amino acids length. If the method :func:`generate_symmetric()` is
used, two or three identical blocks are concatenated. If the method :func:`generate_asymmetric()` is used,
two or three different blocks are concatenated.
"""

import random
from core import mutate_AA, aminoacids, clean, save_fasta

__author__ = 'modlab'

class CentroSequences:
	'''
	Base class for peptide sequences produced out of 7 AA centro-symmetric blocks yielding peptides of length 14 or 21 AA (2*7 or 3*7)
	'''

	def __init__(self,seqnum=1):
		'''
		:param seqnum: number of sequences to generate
		:return: defined number of sequences to generate, empty list to store produced sequences
		'''
		aminoacids(self)
		self.seqnum = int(seqnum)


	def generate_symmetric(self):
		'''
		The :func:`generate_symmetric()` method generates overall symmetric sequences out of two or three blocks of
		identical centro-symmetric sequence blocks of 7 amino acids. The resulting sequence presumably has a large
		hydrophobic moment.

		:return: In *self.sequences*: centro-symmetric peptide sequences of the form [h,+,h,a,h,+,h] with h = hydrophobic AA, + = basic AA,
		  a = anchor AA (F,Y,W,(P)), sequence length is 14 or 21 AA
		:Example:

		>>> S = CentroSequences(5)
		>>> S.generate_symmetric()
		>>> S.sequences
		['ARIFIRAARIFIRA','GRIYIRGGRIYIRGGRIYIRG','IRGFGRIIRGFGRIIRGFGRI','GKAYAKGGKAYAKG','AKGYGKAAKGYGKAAKGYGKA']
		'''
		clean(self)
		for s in range(self.seqnum): #iterate over number of sequences to generate
			n = random.choice(range(2,4)) #number of sequence blocks to take (2 or 3)
			seq = ['X'] * 7 #template sequence AA list with length 7
			for a in range(7): #generate symmetric sequence block of 7 AA with an anchor in the middle
				if a == 0:
					seq[0] = random.choice(self.AA_hyd)
					seq[6] = seq[0]
				elif a == 1:
					seq[1] = random.choice(self.AA_basic)
					seq[5] = seq[1]
				elif a == 2:
					seq[2] = random.choice(self.AA_hyd)
					seq[4] = seq[2]
				elif a == 3:
					seq[3] = random.choice(self.AA_anchor)
				else:
					continue
			self.sequences.append(''.join(seq)*n)


	def generate_asymmetric(self):
		'''
		The :func:`generate_asymmetric()` method generates overall asymmetric sequences out of two or three blocks of
		different centro-symmetric sequence blocks of 7 amino acids. The resulting sequence presumably has a large
		hydrophobic	moment.

		:return: In *self.sequences*: a list of peptide sequences as strings of length 14 or 21
		:Example:

		>>> S = CentroSequences(5)
		>>> S.generate_asymmetric()
		>>> S.sequences
		['GRLFLRGAKGFGKAVRVWVRV','IKGWGKILKLYLKL','LKAYAKLVKAWAKVLRLFLRL','IRLWLRIIKAFAKI','LRIFIRLVKLWLKVIRLWLRI']
		'''
		clean(self)
		for s in range(self.seqnum): #iterate over number of sequences to generate
			n = random.choice(range(2,4)) #number of sequence blocks to take (2 or 3)
			seq = ['X'] * 7 #template sequence AA list with length 7
			self.blocks = list()
			for c in range(n):
				for a in range(7): #generate symmetric sequence block of 7 AA with an anchor in the middle
					if a == 0:
						seq[0] = random.choice(self.AA_hyd)
						seq[6] = seq[0]
					elif a == 1:
						seq[1] = random.choice(self.AA_basic)
						seq[5] = seq[1]
					elif a == 2:
						seq[2] = random.choice(self.AA_hyd)
						seq[4] = seq[2]
					elif a == 3:
						seq[3] = random.choice(self.AA_anchor)
					else:
						continue
				self.blocks.append(''.join(seq))
			self.sequences.append(''.join(self.blocks))


	def mutate_AA(self,nr,prob):
		"""
		Method to mutate with **prob** probability a **nr** of positions per sequence randomly.

		:param nr: number of mutations to perform per sequence
		:param prob: probability of mutating a sequence
		:return: In *self.sequences*: mutated sequences
		:Example:

		>>> S.sequences
		['IAKAGRAIIK']
		>>> S.mutate_AA(3,1)
		>>> S.sequences
		['NAKAGRAWIK']
		"""
		mutate_AA(self,nr,prob)


	def save_fasta(self,filename):
		"""
		Method for saving sequences in the instance self.sequences to a file in FASTA format.

		:param filename: output filename (ending .fasta)
		:return: a FASTA formatted file containing the generated sequences
		"""
		save_fasta(self,filename)